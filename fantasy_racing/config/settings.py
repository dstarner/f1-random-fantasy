"""
Django settings for fantasy_racing.config project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url


def get_bool_env(key, default=False):
    return os.getenv(key, default) in [True, 'True', 'true', '1', 'yes']


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-k#yg$nf$5d8&3v==_d@a(=fqh!ubmx+&tk1#w7s*$znif&e330')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool_env('DEBUG', default=True)

ALLOWED_HOSTS = [host.strip() for host in os.getenv('ALLOWED_HOSTS', '*').split(',')]

SECURE_SSL_REDIRECT = get_bool_env('SECURE_SSL_REDIRECT', default=False)

# We need a special check so that we don't get infinite redirects
SERVING_ON_HEROKU = get_bool_env('SERVING_ON_HEROKU', default=False)
HEROKU_APP_DOMAIN = 'herokuapp.com'
if SERVING_ON_HEROKU:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if not DEBUG:
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', default=60))
    CSRF_COOKIE_SECURE = get_bool_env('CSRF_COOKIE_SECURE', default=SECURE_SSL_REDIRECT)
    SECURE_HSTS_PRELOAD = get_bool_env('SECURE_HSTS_PRELOAD', default=SECURE_SSL_REDIRECT)
    X_FRAME_OPTIONS = os.getenv('X_FRAME_OPTIONS', default='DENY').upper()
    SESSION_COOKIE_SECURE = get_bool_env('SESSION_COOKIE_SECURE', default=SECURE_SSL_REDIRECT)
    SECURE_BROWSER_XSS_FILTER = get_bool_env('SECURE_BROWSER_XSS_FILTER', default=True)
    SECURE_CONTENT_TYPE_NOSNIFF = get_bool_env('SECURE_CONTENT_TYPE_NOSNIFF', default=True)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = get_bool_env('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=SECURE_SSL_REDIRECT)



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'fantasy_racing.picks',

    'markdownify.apps.MarkdownifyConfig',
]


USE_WHITENOISE = get_bool_env('USE_WHITENOISE', False)

MIDDLEWARE = list(filter(lambda x: x is not None, [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware' if USE_WHITENOISE else None,
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]))

ROOT_URLCONF = 'fantasy_racing.config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fantasy_racing.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if os.getenv('DATABASE_URL', None) is not None:
    DATABASES = {'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


TWITTER_CLIENT_ID = os.getenv('TWITTER_CLIENT_ID')
TWITTER_CLIENT_SECRET = os.getenv('TWITTER_CLIENT_SECRET')
TWITTER_KEY = os.getenv('TWITTER_KEY')
TWITTER_SECRET = os.getenv('TWITTER_SECRET')
TWITTER_CALLBACK = os.getenv('TWITTER_CALLBACK', 'http://127.0.0.1:8000/pick')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'collected-static'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

if USE_WHITENOISE:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_LEVEL = os.getenv('LOG_LEVEL', default='DEBUG' if DEBUG else 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'formatters': {
        'verbose': {
            'format': (
                '[{schema_name}:{domain_url}] {levelname} {asctime} {module} {process:d} {thread:d} {message}'
            ),
            'style': '{',
        },
        'simple': {
            'format': '[{schema_name}] {levelname} {message}',
            'style': '{',
        },
    },
    'loggers': {
        'django': {
            'formatter': 'simple' if DEBUG else 'verbose',
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'fantasy_racing': {
            'formatter': 'simple' if DEBUG else 'verbose',
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'celery': {
            'formatter': 'simple' if DEBUG else 'verbose',
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}